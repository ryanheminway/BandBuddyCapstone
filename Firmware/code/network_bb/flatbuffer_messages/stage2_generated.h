// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STAGE2_SERVER_STAGE2_H_
#define FLATBUFFERS_GENERATED_STAGE2_SERVER_STAGE2_H_

#include "flatbuffers/flatbuffers.h"

namespace Server {
namespace Stage2 {

struct Stage2;
struct Stage2Builder;

struct Stage2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Stage2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_READY = 4,
    VT_MIDI_DATA_SZ = 6
  };
  uint8_t ready() const {
    return GetField<uint8_t>(VT_READY, 0);
  }
  uint32_t midi_data_sz() const {
    return GetField<uint32_t>(VT_MIDI_DATA_SZ, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_READY) &&
           VerifyField<uint32_t>(verifier, VT_MIDI_DATA_SZ) &&
           verifier.EndTable();
  }
};

struct Stage2Builder {
  typedef Stage2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ready(uint8_t ready) {
    fbb_.AddElement<uint8_t>(Stage2::VT_READY, ready, 0);
  }
  void add_midi_data_sz(uint32_t midi_data_sz) {
    fbb_.AddElement<uint32_t>(Stage2::VT_MIDI_DATA_SZ, midi_data_sz, 0);
  }
  explicit Stage2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Stage2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Stage2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Stage2> CreateStage2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t ready = 0,
    uint32_t midi_data_sz = 0) {
  Stage2Builder builder_(_fbb);
  builder_.add_midi_data_sz(midi_data_sz);
  builder_.add_ready(ready);
  return builder_.Finish();
}

inline const Server::Stage2::Stage2 *GetStage2(const void *buf) {
  return flatbuffers::GetRoot<Server::Stage2::Stage2>(buf);
}

inline const Server::Stage2::Stage2 *GetSizePrefixedStage2(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Server::Stage2::Stage2>(buf);
}

inline bool VerifyStage2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Server::Stage2::Stage2>(nullptr);
}

inline bool VerifySizePrefixedStage2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Server::Stage2::Stage2>(nullptr);
}

inline void FinishStage2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Server::Stage2::Stage2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStage2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Server::Stage2::Stage2> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Stage2
}  // namespace Server

#endif  // FLATBUFFERS_GENERATED_STAGE2_SERVER_STAGE2_H_
