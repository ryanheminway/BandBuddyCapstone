// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEBSERVER_SERVER_WEBSERVER_H_
#define FLATBUFFERS_GENERATED_WEBSERVER_SERVER_WEBSERVER_H_

#include "flatbuffers/flatbuffers.h"

namespace Server {
namespace WebServer {

struct WebServer;
struct WebServerBuilder;

struct WebServer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WebServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GENRE = 4
  };
  uint32_t genre() const {
    return GetField<uint32_t>(VT_GENRE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_GENRE) &&
           verifier.EndTable();
  }
};

struct WebServerBuilder {
  typedef WebServer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_genre(uint32_t genre) {
    fbb_.AddElement<uint32_t>(WebServer::VT_GENRE, genre, 0);
  }
  explicit WebServerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WebServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WebServer>(end);
    return o;
  }
};

inline flatbuffers::Offset<WebServer> CreateWebServer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t genre = 0) {
  WebServerBuilder builder_(_fbb);
  builder_.add_genre(genre);
  return builder_.Finish();
}

inline const Server::WebServer::WebServer *GetWebServer(const void *buf) {
  return flatbuffers::GetRoot<Server::WebServer::WebServer>(buf);
}

inline const Server::WebServer::WebServer *GetSizePrefixedWebServer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Server::WebServer::WebServer>(buf);
}

inline bool VerifyWebServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Server::WebServer::WebServer>(nullptr);
}

inline bool VerifySizePrefixedWebServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Server::WebServer::WebServer>(nullptr);
}

inline void FinishWebServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Server::WebServer::WebServer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWebServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Server::WebServer::WebServer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WebServer
}  // namespace Server

#endif  // FLATBUFFERS_GENERATED_WEBSERVER_SERVER_WEBSERVER_H_
